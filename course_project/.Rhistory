output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
results = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
#output[iterator, 2] <- median(values_2)
#output[iterator, 3] <- median(values_7)
iterator <- iterator+1
}
View(output)
results
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=2, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- result
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
View(Pearson_results)
View(fat1train)
colnames(Pearson_results) <- c("predictor", "correlation")
View(Pearson_results)
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- round(absolute(result),3)
iterator <- iterator+1
}
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- round(abs(result),3)
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute value")
Pearson_results <- Pearson_results[order(-`absolute value`),]
View(Pearson_results)
Pearson_results <- Pearson_results[order(-"absolute value"),]
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute_value")
Pearson_results <- Pearson_results[order(-absolute_value),]
View(Pearson_results)
Pearson_results[order(-absolute_value),]
Pearson_results[order(-predictor),]
Pearson_results <- Pearson_results[order(-Pearson_results[,3]),]
View(Pearson_results)
Pearson_results[order(-Pearson_results[,3]),]
Pearson_results <- Pearson_results[order(-Pearson_results[,3]),]
View(Pearson_results)
Pearson_results <- Pearson_results[order(Pearson_results$`correlation coefficient`),]
View(Pearson_results)
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- round(abs(result),3)
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute_value")
Pearson_results <- Pearson_results[order(Pearson_results$`correlation coefficient`),]
View(Pearson_results)
Pearson_results <- Pearson_results[order(-Pearson_results$absolute_value),]
View(Pearson_results)
x <- Pearson_results[order(-Pearson_results$absolute_value),]
View(x)
View(Pearson_results)
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- abs(result),3
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- abs(result)
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute_value")
Pearson_results_ordered <- Pearson_results[order(-Pearson_results$absolute_value),]
View(Pearson_results_ordered)
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- abs(result)
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute_value")
Pearson_results[, 3] <- sapply(Pearson_results[, 3], as.numeric)
Pearson_results_ordered <- Pearson_results[order(-Pearson_results$absolute_value),]
x <- fat1train$brozek
cols = colnames(fat)[2:18]
output <- matrix(ncol=3, nrow=17)
iterator <- 1
for (col in cols){
y = fat1train[,col]
result = cor(x, y, method = c("pearson"))
output[iterator, 1] <- col
output[iterator, 2] <- round(result,3)
output[iterator, 3] <- abs(result)
iterator <- iterator+1
}
Pearson_results <- data.frame(output)
colnames(Pearson_results) <- c("predictor", "correlation coefficient", "absolute_value")
Pearson_results[, 3] <- sapply(Pearson_results[, 3], as.character)
Pearson_results[, 3] <- sapply(Pearson_results[, 3], as.numeric)
Pearson_results_ordered <- Pearson_results[order(-Pearson_results$absolute_value),]
View(Pearson_results_ordered)
View(fat1train)
View(fat1test)
View(fat1train)
View(Pearson_results_ordered)
View(Pearson_results_ordered)
ls
knitr::opts_chunk$set(echo = FALSE)
# Read in dataset
dat <- read.table(file="Auto.csv", sep = ",", header=TRUE)
View(dat)
View(dat)
knitr::opts_chunk$set(echo = FALSE)
library("magrittr")
library("knitr")
library("kableExtra")
library("ggplot2")
library("corrplot")
library("cowplot")
library("class")
library("kableExtra")
library("leaps")
library("MASS")
library("lars")
library("pls")
library("scales")
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
View(Auto)
View(Auto)
unique(Auto$origin)
colnames(Auto)
View(Auto)
low_mpg_cars <- subset(Auto, Auto[,1]==FALSE)
high_mpg_cars <- subset(Auto, Auto[,1]==TRUE)
View(high_mpg_cars)
low_mpg_size = nrow(low_mpg_cars)
high_mpg_size = nrow(high_mpg_cars)
# Origin
pct_results <- matrix(ncol=3, nrow=10)
unique_origins = c(1,2,3)
low_mpg_size = nrow(low_mpg_cars)
high_mpg_size = nrow(high_mpg_cars)
iterator <- 1
for (origin in unique_origins){
pct_low_mpg = nrow(subset(low_mpg_cars, low_mpg_cars[, c("origin")]==origin))/low_mpg_size*100
pct_results[iterator, 1:3] <- c(origin, pct_low_mpg, 'low-mpg')
iterator <- iterator+1
pct_high_mpg = nrow(subset(high_mpg_cars, high_mpg_cars[, c("origin")]==origin))/high_mpg_size*100
pct_results[iterator, 1:3] <- c(origin, pct_high_mpg, 'high-mpg')
iterator <- iterator+1
}
View(pct_results)
subset(low_mpg_cars, low_mpg_cars[, c("origin")]==origin)
m <- subset(low_mpg_cars, low_mpg_cars[, c("origin")]==origin)
View(m)
low_mpg_cars[, c("origin")]
low_mpg_cars[which(low_mpg_cars$origin==origin), ]
# Origin
pct_results <- matrix(ncol=3, nrow=10)
unique_origins = c(1,2,3)
low_mpg_size = nrow(low_mpg_cars)
high_mpg_size = nrow(high_mpg_cars)
iterator <- 1
for (origin in unique_origins){
pct_low_mpg = nrow(low_mpg_cars[which(low_mpg_cars$origin==origin), ])/low_mpg_size*100
pct_results[iterator, 1:3] <- c(origin, pct_low_mpg, 'low-mpg')
iterator <- iterator+1
pct_high_mpg = nrow(high_mpg_cars[which(high_mpg_cars$origin==origin), ])/high_mpg_size*100
pct_results[iterator, 1:3] <- c(origin, pct_high_mpg, 'high-mpg')
iterator <- iterator+1
}
# Plot origin results
plot_df <- data.frame(pct_results)
View(plot_df)
View(high_mpg_cars)
knitr::opts_chunk$set(echo = FALSE)
library("magrittr")
library("knitr")
library("kableExtra")
library("ggplot2")
library("scales")
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
# Create binary variables
Auto$Cyliner4 <- ifelse(Auto$cylinders==4, 1, 0)
Auto$Cyliner6 <- ifelse(Auto$cylinders==6, 1, 0)
Auto$Cyliner8 <- ifelse(Auto$cylinders==8, 1, 0)
Auto$Origin1 <- ifelse(Auto$origin==1, 1, 0)
Auto$Origin2 <- ifelse(Auto$origin==2, 1, 0)
Auto$Origin3 <- ifelse(Auto$origin==3, 1, 0)
# Drop ordinal/categorical columns
Auto = subset(Auto, select = -c(cylinders,origin) )
# Split into train/test
# Set sample sizes
n1 = 314
n2 = 78
n = dim(Auto)
# Set seed for randomization
set.seed(7406)
# Split data
flag <- sort(sample(1:n, n1))
Auto_train <- Auto[flag,]
Auto_test <- Auto[-flag,]
View(Auto)
pairs(Auto[, c(2:6)])
res <- cor(Auto[, c(2:6)])
View(res)
View(res)
corr_matrix <- data.frame(res)
View(corr_matrix)
rm(list=ls())
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
# Segment low/high mpg groups
low_mpg_cars <- subset(Auto, Auto[,1]==FALSE)
high_mpg_cars <- subset(Auto, Auto[,1]==TRUE)
View(Auto)
View(Auto)
View(Auto)
rm(list = ls())
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
# Create binary variables
Auto$Cyliner4 <- ifelse(Auto$cylinders==4, 1, 0)
Auto$Cyliner6 <- ifelse(Auto$cylinders==6, 1, 0)
Auto$Cyliner8 <- ifelse(Auto$cylinders==8, 1, 0)
Auto$Origin1 <- ifelse(Auto$origin==1, 1, 0)
Auto$Origin2 <- ifelse(Auto$origin==2, 1, 0)
Auto$Origin3 <- ifelse(Auto$origin==3, 1, 0)
# Drop ordinal/categorical columns
Auto = subset(Auto, select = -c(cylinders,origin, displacement, horsepower))
View(Auto)
rm(list = ls())
library("caret")
library("caret")
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
# Create binary variables
Auto$Cylinder4 <- ifelse(Auto$cylinders==4, 1, 0)
Auto$Cylinder6 <- ifelse(Auto$cylinders==6, 1, 0)
Auto$Cylinder8 <- ifelse(Auto$cylinders==8, 1, 0)
Auto$Origin1 <- ifelse(Auto$origin==1, 1, 0)
Auto$Origin2 <- ifelse(Auto$origin==2, 1, 0)
Auto$Origin3 <- ifelse(Auto$origin==3, 1, 0)
# Drop ordinal/categorical columns
Auto = subset(Auto, select = -c(cylinders,origin, displacement, horsepower))
View(Auto)
# Split into train/test
# Set sample sizes
n1 = 314
n2 = 78
n = dim(Auto)
# Set seed for randomization
set.seed(7406)
# Split data
flag <- sort(sample(1:n, n1))
Auto_train <- Auto[flag,]
Auto_test <- Auto[-flag,]
trControl <- trainControl(method  = "cv",
number  = 10)
View(trControl)
View(Auto_train)
View(Auto_train)
fit <- train(mpg01 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = Auto_train)
View(Auto_train)
rm(list = ls())
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
Auto$mpg0 <- as.integer(as.logical(Auto$mpg01))
# Segment low/high mpg groups
low_mpg_cars <- subset(Auto, Auto[,1]==FALSE)
high_mpg_cars <- subset(Auto, Auto[,1]==TRUE)
View(Auto)
rm(list = ls())
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
Auto$mpg01 <- as.integer(as.logical(Auto$mpg01))
View(Auto)
# Create binary variables
Auto$Cylinder4 <- ifelse(Auto$cylinders==4, 1, 0)
Auto$Cylinder6 <- ifelse(Auto$cylinders==6, 1, 0)
Auto$Cylinder8 <- ifelse(Auto$cylinders==8, 1, 0)
Auto$Origin1 <- ifelse(Auto$origin==1, 1, 0)
Auto$Origin2 <- ifelse(Auto$origin==2, 1, 0)
Auto$Origin3 <- ifelse(Auto$origin==3, 1, 0)
# Drop ordinal/categorical columns
Auto = subset(Auto, select = -c(cylinders,origin, displacement, horsepower))
# Split into train/test
# Set sample sizes
n1 = 314
n2 = 78
n = dim(Auto)
# Set seed for randomization
set.seed(7406)
# Split data
flag <- sort(sample(1:n, n1))
Auto_train <- Auto[flag,]
Auto_test <- Auto[-flag,]
# Optimizing KNN
trControl <- trainControl(method  = "cv",
number  = 10)
fit <- train(mpg01 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = Auto_train)
View(Auto_train)
trControl <- trainControl(method  = "cv",
number  = 10)
fit <- train(mpg01 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = Auto_train)
Auto2 <- Auto
# Optimizing KNN
trControl <- trainControl(method  = "cv",
number  = 10)
Auto_train2 <- Auto_train
Auto_train2$mpg01 <- ifelse(Auto_train2$mpg01==1, 'high-mpg', 'low-mpg')
fit <- train(mpg01 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = Auto_train2)
fit
View(Auto_train2)
rm(list=ls())
library("magrittr")
library("knitr")
library("kableExtra")
library("ggplot2")
library("scales")
library("caret")
# Read in dataset
Auto <- read.table(file="Auto.csv", sep = ",", header=TRUE)
# # Create binary variable mpg01
mpg01 = I(Auto$mpg >= median(Auto$mpg))
Auto = data.frame(mpg01, Auto)
Auto$mpg <- NULL
Auto$mpg01 <- as.integer(as.logical(Auto$mpg01))
# Create binary variables
Auto$Cylinder4 <- ifelse(Auto$cylinders==4, 1, 0)
Auto$Cylinder6 <- ifelse(Auto$cylinders==6, 1, 0)
Auto$Cylinder8 <- ifelse(Auto$cylinders==8, 1, 0)
Auto$Origin1 <- ifelse(Auto$origin==1, 1, 0)
Auto$Origin2 <- ifelse(Auto$origin==2, 1, 0)
Auto$Origin3 <- ifelse(Auto$origin==3, 1, 0)
# Drop ordinal/categorical columns
Auto = subset(Auto, select = -c(cylinders,origin, displacement, horsepower))
# Split into train/test
# Set sample sizes
n1 = 314
n2 = 78
n = dim(Auto)
# Set seed for randomization
set.seed(7406)
# Split data
flag <- sort(sample(1:n, n1))
Auto_train <- Auto[flag,]
Auto_test <- Auto[-flag,]
# Optimizing KNN
trControl <- trainControl(method  = "cv",
number  = 10)
Auto_train2 <- Auto_train
Auto_train2$mpg01 <- ifelse(Auto_train2$mpg01==1, 'high-mpg', 'low-mpg')
fit <- train(mpg01 ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:20),
trControl  = trControl,
metric     = "Accuracy",
data       = Auto_train2)
fit
fit$results
plot(fit$results$k, fit$results$Accuracy,
xlab="K Value", ylab="Accuracy", pch=19)
398/2
low_mpg_cars <- subset(Auto, Auto[,1]==0)
high_mpg_cars <- subset(Auto, Auto[,1]==1)
knitr::opts_chunk$set(echo = FALSE)
library("magrittr")
library("knitr")
library("kableExtra")
library("ggplot2")
library("scales")
library("caret")
library("MASS")
library("e1071")
library("class")
m <- 1000
n <- 101
x <- 2*pi*seq(-1, 1, length=n)
(1-4**2)
(1-2**2)
rnorm(length(x))
mexHat(x)
mexHat <- function(x_in){
return ((1-x_in**2)*exp(-0.5*x_in**2))
}
mexHat(x)
# Libraries
library("ggplot2")
library("rpart")
library("randomForest")
library("caret")
library("gbm")
library("glmnet")
# Read in Data
dat <- read.table(file="../train.csv", sep = ",", header=TRUE)
dat <- read.table(file="..\train.csv", sep = ",", header=TRUE)
dat <- read.table(file="..\data_files\train.csv", sep = ",", header=TRUE)
dat <- read.table(file="..\\data_files\train.csv", sep = ",", header=TRUE)
dat <- read.table(file="C:\Users\Kyle Jones\OneDrive\Desktop\GT-7406-StatisticalLearning\data_filess\train.csv",
sep = ",", header=TRUE)
dat <- read.table(file="C:\Users\Kyle Jones\OneDrive\Desktop\GT-7406-StatisticalLearning\data_files\train.csv",
sep = ",", header=TRUE)
dat <- read.table(file="data_files/train.csv",
sep = ",", header=TRUE)
dat <- read.table(file="../data_files/train.csv",
sep = ",", header=TRUE)
setwd("\Users\Kyle Jones\OneDrive\Desktop\GT-7406-StatisticalLearning")
setwd("/Users/Kyle Jones/OneDrive/Desktop/GT-7406-StatisticalLearning")
# Read in Data
dat <- read.table(file="./data_files/train.csv",
sep = ",", header=TRUE)
View(dat)
